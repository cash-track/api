name: build

on:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  security:
    name: Security
    runs-on: [self-hosted, Linux, x64]
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Prepare Cache For Vulnerability Database
        uses: actions/cache@v2
        id: vulnerability-db-cache
        with:
          path: ~/.vulnerability-db/cache
          key: vulnerability-db

      - name: Scan Packages For Vulnerability
        uses: symfonycorp/security-checker-action@v2

  static-analysis:
    name: Static Analysis
    if: false
    runs-on: [self-hosted, Linux, x64]
    container: shivammathur/node:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        env:
          runner: self-hosted
        with:
          php-version: '8.1'
          extensions: zip, mbstring, pdo_mysql, mysqli
          tools: composer

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Prepare Cache For Composer
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

      - name: Run Psalm
        run: ./vendor/bin/psalm --php-version=8.1 --show-info=true --no-cache

  coding-standards:
    name: Coding Standards
    if: false
    runs-on: [self-hosted, Linux, x64]
    container: shivammathur/node:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        env:
          runner: self-hosted
        with:
          php-version: '8.1'
          extensions: zip, mbstring, pdo_mysql, mysqli
          tools: composer

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Prepare Cache For Composer
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

      - name: Run Code Sniffer
        run: ./vendor/bin/phpcs -p -n --standard=PSR12 --colors --report=code ./app/src

  tests:
    name: Tests
    runs-on: [self-hosted, Linux, x64]
    container: shivammathur/node:latest
    permissions:
      contents: read
      packages: write

#    services:
#      mysql:
#        image: mysql:8.0
#        env:
#          MYSQL_ALLOW_EMPTY_PASSWORD: false
#          MYSQL_ROOT_PASSWORD: secret
#          MYSQL_DATABASE: cashtrack
#        ports:
#          - 33060:3306
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          #host port: 3800 # Optional, default value is 3306. The port of host
          #container port: 3307 # Optional, default value is 3306. The port of container
          #character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          #collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: '8.0' # Optional, default value is "latest". The version of the MySQL
          mysql database: 'cashtrack' # Optional, default value is "test". The specified database which will be create
          mysql root password: secret # Required if "mysql user" is empty, default is empty. The root superuser password
          #mysql user: 'cashtrack' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          #mysql password: secret # Required if "mysql user" exists. The password for the "mysql user"

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        env:
          runner: self-hosted
        with:
          php-version: '8.1'
          coverage: pcov
          extensions: zip, mbstring, pdo_mysql, mysqli, openssl
          tools: composer, phpunit

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Prepare Cache For Composer
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Setup Application
        run: |
          cp .env.actions .env
          composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader
          php app.php encrypt:key -m .env
          php app.php rsa:gen -m .env
          php app.php configure -vv
          vendor/bin/spiral get-binary
          php app.php migrate:init
          php app.php migrate

      - name: Run PHPUnit
        run: ./vendor/bin/phpunit --coverage-clover=coverage.xml

      - name: Upload Coverage To Codecov
        continue-on-error: true
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
